Soluciones para que el botón "Run Python File in Terminal" funcione:

1. Asegúrate de que el Intérprete Sea Correcto: Verifica el intérprete de Python seleccionado en la barra de estado (parte inferior de VS Code). Si no es el intérprete de tu entorno virtual, cámbialo.  

2. Configurar el Comportamiento del Botón (a través de settings.json): Puedes personalizar el comportamiento del comando asociado a este botón modificando la configuración de VS Code. Busca la configuración relacionada con la ejecución de Python en la terminal.
- Ve a "Archivo" > "Preferencias" > "Configuración" (o Ctrl+,).
- Busca python.terminal.executeInFileDir. Por defecto, esta configuración suele estar en true, lo que hace que el script se ejecute con el directorio del archivo como directorio de trabajo.
Puedes intentar establecer python.terminal.executeInFileDir a false. Esto podría hacer que se utilice el directorio de trabajo de la terminal activa (si tienes tu entorno virtual activado en una terminal en VS Code). Sin embargo, este comportamiento puede ser inconsistente.

3. Crear una Tarea Personalizada: Una solución más robusta es crear una tarea personalizada en tasks.json que ejecute tu script con el directorio de trabajo deseado y luego asociar esa tarea a un atajo de teclado (si lo deseas) o ejecutarla desde el menú "Tareas".

Ejemplo de tasks.json (crea este archivo en la carpeta .vscode si no existe):
```JSON
{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "Run Python File (Workspace Root)",
            "type": "shell",
            "command": "${command:python.pythonPath} ${file}",
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "group": {
                "kind": "build",
                "isDefault": false
            }
        }
    ]
}
```
Luego, puedes ejecutar esta tarea desde el menú "Tareas" > "Ejecutar tarea..." y seleccionar "Run Python File (Workspace Root)".


Importancia de las importaciones en los scripts de python

import sys  # Importa el módulo 'sys' para acceder a funcionalidades del sistema, como la ruta de búsqueda de módulos.
import os  # Importa el módulo 'os' para interactuar con el sistema operativo, como la manipulación de rutas de archivos.

# Añadir el directorio padre (directorio raíz del proyecto) a la ruta de Python.
current_dir = os.path.dirname(os.path.abspath(__file__))  # Obtiene la ruta absoluta del directorio donde se encuentra el archivo actual (cliente_dao.py).
parent_dir = os.path.dirname(current_dir)  # Obtiene la ruta del directorio padre del directorio actual (el directorio que contiene a ZonaFIT).
sys.path.append(parent_dir)  # Añade la ruta del directorio padre a la lista de rutas de búsqueda de módulos de Python (sys.path).